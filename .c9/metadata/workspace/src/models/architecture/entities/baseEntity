{"filter":false,"title":"baseEntity","tooltip":"/src/models/architecture/entities/baseEntity","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":73,"column":34},"action":"insert","lines":["               ","   ","   ","var Sim  = require(\"../../../sim/sim.js\");","","var Building  = require(\"../model/building.js\");","var PlannedEvent  = require(\"../model/plannedEvent.js\");",""," ","   ","   ","   ","   ","   ","   ","   ","    class SimulationEntity extends Sim.Entity {","        constructor(...args) {","          super(...args);","          // the light that is turned on currently","          ","          ","          ","          ","          ","          ","          ","        }","        ","        //this method is only called ONCE per user entity","        start([simulation,ctx]) {","            ","            //sets the context","            this.ctx = ctx;","            this.building = new Building(building);","            this.ctx.buildings.set(this.building.name,this.building);","            ","            ","            //adds user population stats within hospital","            this.userStats = new Sim.Population(`${building.name} user population stats`);","            this.ctx.stats.set(building.name,this.userStats);  ","            ","            //register planned events","            building.plannedEvents.forEach(e=>{","                ","                let plannedEvent = new PlannedEvent(e);","                this.building.addPlannedEvent(plannedEvent.name,plannedEvent);","                let startTime = this.ctx.addRandomValue(plannedEvent.start);","                this.setTimer(startTime).done(this.schedulePlannedEvent,this,plannedEvent);","                ","            });","            ","        }","        ","        schedulePlannedEvent(plannedEvent){","            ","            //Execute the planned event","            plannedEvent.action(this.building,this.ctx);","            ","            //Schedule the next plannedEvent","            let repeatInterval = this.ctx.addRandomValue(plannedEvent.repeatInterval);","            this.setTimer(repeatInterval).done(this.schedulePlannedEvent,this,plannedEvent);","            ","            ","            ","        }","        ","      ","        ","    }       ","                         ","                         ","","module.exports = SimulationEntity;"],"id":1}]]},"ace":{"folds":[],"scrolltop":502.5,"scrollleft":0,"selection":{"start":{"row":73,"column":34},"end":{"row":73,"column":34},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":37,"state":"start","mode":"ace/mode/text"}},"timestamp":1481190739478,"hash":"6c901ced9a0c37a81d25399f5a471d36f8aaad28"}